<project name="build-maven-base" xmlns:artifact="antlib:org.apache.maven.artifact.ant"
  xmlns:if="ant:if" xmlns:unless="ant:unless" basedir="..">
  <description>
    $Id$
    Copyright (c) 2001- Responsys, Inc. All Rights Reserved.
    build-base targets/properties
  </description>

  <!-- *****************************************************************************************
       General properties
       ***************************************************************************************** -->
  <!-- Load build properties -->
  <property environment="env" />
  <!-- the HOME environment variable is a unix/linux property -->
  <!-- 1st priority: local home .${deploy.env}.build.properties and .build.properties -->
  <property file="${env.HOME}/.${deploy.env}.build.properties"/>
  <property file="${env.HOME}/.build.properties" />
  <!-- user.home should be of the form C:\Users\your_user_name on developers' Windows machine -->
  <!-- 2nd priority, user home .${deploy.env}.build.properties and .build.properties -->
  <property file="${user.home}/.${deploy.env}.build.properties"/>
  <property file="${user.home}/.build.properties" />
  <!-- 3rd priority: (project_dir)/build/build.properties -->
  <property file="${basedir}/build/build.properties" />
  <!-- 4th priority: build/build-base.properties -->
  <property file="${orion.root.dir}/build/build-base.properties" />

  <!-- *****************************************************************************************
       Optional developer custom targets (importing)
       ***************************************************************************************** -->
  <import file="${env.HOME}/.build.xml" optional="true"/>
  <import file="${user.home}/.build.xml" optional="true"/>

  <!-- *****************************************************************************************
       General filters (importing)
       ***************************************************************************************** -->
  <import file="build-filter.xml" />
  <import file="build-maven-promote.xml" />

  <!-- *****************************************************************************************
       For maven build
       ***************************************************************************************** -->
  <path id="maven.ant.tasks.classpath"
      path="${orion.root.dir}/build/lib/maven-ant-tasks-${maven.ant.tasks.version}.jar" />

  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
      uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.ant.tasks.classpath" />

  <artifact:pom file="${basedir}/pom.xml" id="pom">
    <localRepository path="${maven.repo.local}" />
  </artifact:pom>

  <!-- *****************************************************************************************
     General targets (do depend on properties)
     ***************************************************************************************** -->

  <target name="clean" description="Clean output dirs">
    <antcall target="clean-${project.dist.type}" />
  </target>

  <target name="clean-jar-and-assets" depends="clean-jar" />
  <target name="clean-jar" depends="clean-shallow" description="Clean output dirs">
    <!-- clean depending projects' target directory -->
    <artifact:mvn mavenVersion="${maven.version}" pom="${orion.root.dir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="-P${preparation.maven.profileId}" />
      <arg value="clean" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
  </target>

  <target name="clean-shallow" description="Clean output dirs only on this project">
    <echo message="Cleaning build temporary directories under ${basedir} ..." />
    <!-- do not use .classes / .docs anymore -->
    <delete dir="${classes.dir}" />
    <delete dir="${test.classes.dir}" />
    <delete dir="${test.reports.dir}" />
    <delete dir="${docs.dir}" />

    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${stage.dir}" includes="**/*" />
    </delete>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${dist.dir}" includes="**/*" />
    </delete>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${assets.dir}" includes="**/*" />
    </delete>

    <!-- clean maven target directory -->
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="clean" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
  </target>

  <target name="clean-war-and-assets" depends="clean-war" />
  <target name="clean-war" description="Clean output dirs only on this project">
    <echo message="Cleaning build temporary directories under ${basedir} ..." />
    <!-- do not use .classes / .docs anymore -->
    <delete dir="${classes.dir}" />
    <delete dir="${test.classes.dir}" />
    <delete dir="${test.reports.dir}" />
    <delete dir="${docs.dir}" />

    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${stage.dir}" includes="**/*" />
    </delete>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${dist.dir}" includes="**/*" />
    </delete>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${assets.dir}" includes="**/*" />
    </delete>
    <!-- clean maven target directory -->
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="clean" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
    <!-- clean depending projects' target directory -->
    <artifact:mvn mavenVersion="${maven.version}" pom="${orion.root.dir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="-P${preparation.maven.profileId}" />
      <arg value="clean" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
  </target>

  <target name="dist-clean">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${dist.dir}" includes="**/*" />
    </delete>
  </target>

  <target name="init" description="Create temporary folders and time stamps">
    <!-- do not use classes anymore -->
    <!-- <mkdir dir="${classes.dir}" /> -->
    <mkdir dir="${stage.dir}" />
    <mkdir dir="${dist.dir}" />
    <tstamp />
  </target>

  <target name="init-assets" description="Create assets directory">
    <mkdir dir="${assets.dir}" />
  </target>

  <target name="dist" description="Create distribution either jar or war file">
    <antcall target="${project.dist.type}" />
  </target>

  <target name="dist-shallow" description="Create distribution either jar or war file without executing with dependency">
    <antcall target="${project.dist.type}-shallow" />
  </target>

  <!-- *****************************************************************************************
       compile / jar related
       ***************************************************************************************** -->

  <target name="compile" depends="init, jar-prepare, compile-common" description="Compile java files" />
  <target name="compile-shallow" depends="init, compile-common" description="Compile java files" />

  <target name="compile-common" depends="init" description="Compile java files only on this project">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="compile" />
    </artifact:mvn>
  </target>

  <target name="jar" depends="init, jar-prepare, jar-common" description="Create jar file" />
  <target name="jar-shallow" depends="init, jar-common" description="Create jar file without executing with dependency" />
  <target name="jar-and-assets" depends="jar, assets-copy" />
  <target name="jar-and-assets-shallow" depends="jar-shallow, assets-copy" />

  <target name="jar-prepare">
    <local name="maven.build.isPersonal" />
    <local name="tmp.pom.file" />
    <xmlproperty file="${maven.build.personal.profile}"/>
    <condition property="maven.build.isPersonal">
      <contains string="${project.profiles.profile.id}" substring="${preparation.maven.profileId}" />
    </condition>
    <property if:set="maven.build.isPersonal" name="tmp.pom.file" value="${maven.build.personal.profile}" />
    <property unless:set="maven.build.isPersonal" name="tmp.pom.file" value="${maven.build.profile}" />
    <artifact:mvn mavenVersion="${maven.version}" pom="${tmp.pom.file}"
      fork="true" failonerror="true">
      <arg value="-P${preparation.maven.profileId}" />
      <arg value="install" />
      <arg value="-DskipTests=true" />
      <arg value="-Djetty.skip=true" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
  </target>

  <target name="jar-common">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="install" />
      <arg value="-DskipTests=true" />
      <arg value="-Djetty.skip=true" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
  </target>

  <!-- *****************************************************************************************
       war related
       ***************************************************************************************** -->

  <target name="war-prepare">
    <local name="maven.build.isPersonal" />
    <local name="tmp.pom.file" />
    <xmlproperty file="${maven.build.personal.profile}"/>
    <condition property="maven.build.isPersonal">
      <contains string="${project.profiles.profile.id}" substring="${preparation.maven.profileId}" />
    </condition>
    <property if:set="maven.build.isPersonal" name="tmp.pom.file" value="${maven.build.personal.profile}" />
    <property unless:set="maven.build.isPersonal" name="tmp.pom.file" value="${maven.build.profile}" />
    <artifact:mvn mavenVersion="${maven.version}" pom="${tmp.pom.file}"
      fork="true" failonerror="true">
      <arg value="-P${preparation.maven.profileId}" />
      <arg value="install" />
      <arg value="-DskipTests=true" />
      <arg value="-Djetty.skip=true" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
    <antcall target="war-prepare-shallow" />
  </target>

  <target name="war-prepare-shallow" depends="init">
    <copy todir="${maven.target.dir}/classes">
      <fileset file="etc/verstamp.ini" erroronmissingdir="false" />
    </copy>
  </target>

  <target name="war" depends="init, war-prepare, war-common" description="Create war file" />
  <target name="war-shallow" depends="init, war-prepare-shallow, war-common" description="Create war file without executing with dependency" />

  <target name="war-common" depends="init-assets">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-DskipTests=${maven.test.skip}" />
      <arg value="-Djetty.skip=${maven.test.skip}" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
    </artifact:mvn>
    <copy todir="${dist.dir}">
      <fileset dir="${maven.target.dir}" includes="*.war" />
    </copy>
  </target>

  <target name="war-and-assets" depends="init, build-tools, war-prepare, assets-copy, assets-process, war-common" description="Create war file with assets" />
  <target name="war-and-assets-shallow" depends="init, war-prepare-shallow, assets-copy, assets-process, war-common" description="Create war file with assets without executing with dependency" />

  <target name="exploded" depends="init, build-tools, war-prepare, assets-copy, assets-process, exploded-common" description="Create war file" />
  <target name="exploded-shallow" depends="init, war-prepare-shallow, assets-copy, assets-process, exploded-common" description="Create war file without executing with dependency" />

  <target name="exploded-common" depends="init-assets">
    <mkdir dir="${assets.dir}" />
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="prepare-package" />
      <arg value="war:exploded" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-DskipTests=${maven.test.skip}" />
      <arg value="-Djetty.skip=${maven.test.skip}" />
      <arg value="-Dmaven.repo.local=${maven.repo.local}" />
      <arg value="-DwarExplodedDir=${stage.dir}/${module.name}.war" />
    </artifact:mvn>
  </target>

  <target name="build-tools">
    <ant antfile="${orion.root.dir}/build/tools/build/build.xml" target="dist" inheritAll="false" />
  </target>

  <!-- *****************************************************************************************
       UI Asset related targets (including JS and SASS compilation)
       ***************************************************************************************** -->
  <target name="assets-copy" depends="init-assets">
    <copy todir="${assets.dir}">
      <path refid="assets.path"/>
    </copy>
  </target>

  <!-- Generic target to copy theme assets for any project that has themes -->
  <target name="assets-theme-copy" description="Copy theme assets for any project that has themes">
    <!-- First, base theme -->
    <echo message="Copying base theme for ${projectDir}"/>
    <copy todir="${assets.dir}/assets" includeEmptyDirs="true">
      <fileset dir="${projectDir}/${assets.dir}/assets/ri-theme-base" includes="**/*"/>
    </copy>
    <!-- Then, app theme -->
    <echo message="Copying app theme (${app.ri.theme})"/>
    <copy todir="${assets.dir}/assets" overwrite="true" preservelastmodified="true" includeEmptyDirs="true">
      <fileset dir="${projectDir}/${assets.dir}/assets/${app.ri.theme}" includes="**/*"/>
    </copy>
  </target>

  <!-- Generic target to copy ALL assets for any project that has themes -->
  <target name="assets-copy-with-theme" description="Copy all assets for any project that has themes">
    <echo message="Copying assets for ${projectDir}"/>
    <!-- Things from the project, excluding themes -->
    <!-- Themes are copied separately below because their source path (.assets) doesn't match the target path where we need to copy them (in project's .assets) -->
    <copy todir="${assets.dir}" includeEmptyDirs="true">
      <fileset dir="${projectDir}/${assets.dir}" includes="**/*" excludes="**/ri-theme-*,**/ri-theme-*/**/*"/>
    </copy>
    <antcall target="assets-theme-copy">
      <param name="projectDir" value="${projectDir}"/>
    </antcall>
  </target>

  <target name="assets-zip" depends="assets-copy">
    <property name="zip.name" value="${dist.dir}/interact-${module.name}-${deploy.ver.num}.zip" />
    <zip destfile="${zip.name}">
      <path refid="assets.zip.path"/>
    </zip>
  </target>

  <target name="css-postProcess">
    <property file="./etc/verstamp.ini"/>
    <property name="absolute.assets.dir" location="${assets.dir}"/>
    <java classname="interact.uifoundation.css.parser.CssPostProcessor" failonerror="true">
      <classpath>
        <fileset dir="${maven.repo.local}/interact/uifoundation/interact-uifoundation" includes="**/interact-uifoundation-*.jar" excludes="*tests.jar" />
      </classpath>
      <arg line="v=${Build} ${absolute.assets.dir}"/>
    </java>
  </target>

  <target name="css-cachebust">
    <property file="./etc/verstamp.ini"/>
    <property name="absolute.assets.dir" location="${assets.dir}" />
    <java classname="interact.build.tools.css.parser.CssPostProcessor" failonerror="true">
      <classpath>
        <fileset dir="${orion.root.dir}/build/tools/${dist.dir}" includes="*.jar"/>
      </classpath>
      <arg line="v=${Build} ${absolute.assets.dir}" />
    </java>
  </target>

  <!-- Override this target if the assets need to be post processed. i.e. cache busting, exjs
       concatenation etc -->
  <target name="assets-process"/>

  <!-- *****************************************************************************************
       source / doc related
       ***************************************************************************************** -->

  <target name="source-jar" description="Create source jar file">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="source:jar" />
    </artifact:mvn>
  </target>

  <target name="test-source-jar" description="Create test source jar file">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="source:test-jar" />
    </artifact:mvn>
  </target>

  <target name="doc-jar" description="Create doc jar file">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="javadoc:jar" />
    </artifact:mvn>
  </target>

  <!-- *****************************************************************************************
       TestNG related targets
       ***************************************************************************************** -->

  <target name="test-interactive" depends="jar, test-interactive-shallow" />
  <target name="test-interactive-shallow">
    <input message="Choose a test to run?" validargs="unit,functional"
        addproperty="suite.name" defaultvalue="unit" />
    <antcall target="test-shallow">
      <param name="testng.config.file" value="${test.testng.xml.dir}/testng-${suite.name}.xml" />
    </antcall>
  </target>

  <target name="test" depends="jar, test-unit-shallow" />

  <target name="check-testng-exists">
    <condition property="is.testng.exists" value="true">
      <resourceexists>
        <file file="${testng.config.file}"/>
      </resourceexists>
    </condition>
    <echo message="TestNg configuration file ${testng.config.file} does not exist. Skipping execution." unless:true="${is.testng.exists}" />
  </target>

  <target name="test-shallow" depends="check-testng-exists"  if="${is.testng.exists}">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="test" />
      <arg value="-DtestngConfigFile=${testng.config.file}" />
      <arg value="-Dlog4jOptions=-Dlog4j.configuration=${log4j.config.file}" />
      <arg value="-DtestTestngDebugOptions=${test.testng.debug.options}" />
      <arg value="-DtestTestngJvmOptions=${test.testng.jvm.options}" />
      <arg value="-DdeploySiteDir=${deploy.site.dir}" />
    </artifact:mvn>
  </target>

  <target name="test-all" depends="jar, test-all-shallow" />
  <target name="test-all-shallow">
    <antcall target="test-shallow">
      <param name="testng.config.file" value="${test.testng.xml.dir}/testng-unit.xml,${test.testng.xml.dir}/testng-functional.xml" />
    </antcall>
  </target>

  <target name="test-unit" depends="jar, test-unit-shallow" description="Run all unit test cases" />
  <target name="test-unit-shallow" description="Run all unit test cases without dependency">
    <antcall target="test-shallow">
      <param name="testng.config.file" value="${test.testng.xml.dir}/testng-unit.xml" />
    </antcall>
  </target>

  <target name="test-functional" depends="jar, test-functional-shallow" description="Run all functional test cases" />
  <target name="test-functional-shallow" description="Run all functional test cases without dependency">
    <antcall target="test-shallow">
      <param name="testng.config.file" value="${test.testng.xml.dir}/testng-functional.xml" />
    </antcall>
  </target>

  <!-- *****************************************************************************************
       Testing prep related targets
       ***************************************************************************************** -->

  <target name="test-compile">
    <antcall target="dependencies-execute">
      <param name="action.name" value="test-jar-only" />
    </antcall>
    <antcall target="test-compile-shallow" />
  </target>

  <target name="test-compile-shallow">
    <artifact:mvn mavenVersion="${maven.version}" pom="${basedir}/pom.xml"
      fork="true" failonerror="true">
      <arg value="test-compile" />
    </artifact:mvn>
  </target>

  <target name="test-init" depends="init">
    <!-- make sure classpath directories are present -->
    <mkdir dir="${deploy.localfiles.dir}/config" />
    <mkdir dir="${deploy.site.dir}/config" />
  </target>

  <!-- utility -->
  <target name="echoproperties">
    <echoproperties />
  </target>

  <!-- *****************************************************************
       Backward compatibility
       ***************************************************************** -->
  <target name="test-clean" depends="clean">
    <echo message="'clean.test' target is obsoleted, please use 'clean' instead." />
  </target>
  <target name="clean.test" depends="test-clean">
    <echo message="'clean.test' target is obsoleted, please use 'clean' instead." />
  </target>
  <target name="clean-test" depends="test-clean">
    <echo message="'clean-test' target is obsoleted, please use 'clean' instead." />
  </target>
  <target name="init-test" depends="test-init">
    <echo message="'init-test' target is obsoleted, please use 'test-init' instead." />
  </target>
  <target name=".compile" depends="compile">
    <echo message="'.compile' target is obsoleted, please use 'compile' instead." />
  </target>
  <target name=".jar.build" depends="jar">
    <echo message="'.jar.build' target is obsoleted, please use 'jar' instead." />
  </target>
  <target name=".war.build" depends="war">
    <echo message="'.war.build' target is obsoleted, please use 'war' instead." />
  </target>
  <!--
  <target name=".configure.cpfiles" depends="configure">
    <echo message="'.configure.cpfiles' target is obsoleted, please use 'configure' instead." />
  </target>
  -->
  <target name=".test-unit-interactive" depends="test-interactive">
    <echo message="'.test-unit-interactive' target is obsoleted, please use 'test-interactive' instead." />
  </target>
  <target name=".test-unit" depends="test">
    <echo message="'.test-unit' target is obsoleted, please use 'test' instead." />
  </target>
  <target name=".test.compile" depends="test-compile">
    <echo message="'.test.compile' target is obsoleted, please use 'test-compile' instead." />
  </target>
  <target name="test.compile" depends="test-compile">
      <echo message="'test.compile' target is obsoleted, please use 'test-compile' instead." />
  </target>
  <target name="compile-test" depends="test-compile">
      <echo message="'compile-test' target is obsoleted, please use 'test-compile' instead." />
  </target>
  <target name="build" depends="dist">
    <echo message="'build' target is obsoleted, please use 'dist' instead." />
  </target>
  <target name="run.test-interactive" depends="test-interactive">
    <echo message="'run.test-interactive' target is obsoleted, please use 'test-interactive' instead." />
  </target>
  <target name="run.test" depends="test">
    <echo message="'run.test' target is obsoleted, please use 'test' instead." />
  </target>
  <target name="test-suite" depends="test-interactive">
    <echo message="'test-suite' target is obsoleted, please use 'test-interactive' instead." />
  </target>
</project>
